#!/usr/bin/env python3

"""
  convert-characters -- convert multiple images into one character set
  Copyright (C) Dieter Baron

  The author can be contacted at <dillo@tpau.group>.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. The names of the authors may not be used to endorse or promote
     products derived from this software without specific prior
     written permission.

  THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS
  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir, "python-packages")))

import argparse
import enum
import yaml

import AssemblerOutput
import AtomicOutput
import CharacterImage
import Charset
import Dependencies
import RunlengthEncoder


class Inverted(enum.Enum):
    NONE = "none"
    CREATE = "create"
    PRESENT = "present"
    IF_DIFFERENT = "if-different"


class Spec:
    @staticmethod
    def decode(yaml, key, default_value=None):
        if yaml is not None and key in yaml:
            return yaml[key]
        else:
            return default_value

    class Charset:
        def __init__(self, yaml):
            self.count = Spec.decode(yaml, "count", 256)
            self.width = Spec.decode(yaml, "width", 8)
            self.height = Spec.decode(yaml, "height", 8)
            self.name = Spec.decode(yaml, "name")
            self.predefined = Spec.decode(yaml, "predefined", {})

    class Image:
        def __init__(self, yaml, spec):
            self.file = Spec.decode(yaml, "file")
            self.inverted = Inverted(Spec.decode(yaml, "inverted", "none"))
            self.include_count = Spec.decode(yaml, "include-count", True)
            self.name = Spec.decode(yaml, "name")
            self.screen_width = Spec.decode(yaml, "screen-width", spec.screen_width)
            self.slice_x = Spec.decode(yaml, "slice-x", 1)
            self.slice_y = Spec.decode(yaml, "slice-y", 1)
            self.enable_skip_blank = Spec.decode(yaml, "skip-blank", False)
            self.type = Spec.decode(yaml, "type")
            self.offset = Spec.decode(yaml, "offset", 0)

            self.keep_blanks = {}
            for value in Spec.decode(yaml, "keep-blanks", []):
                self.keep_blanks[value] = True

        def skip_blank(self, index):
            return self.enable_skip_blank and index not in self.keep_blanks

    def __init__(self, yaml):
        self.assembler = Spec.decode(yaml, "assembler", "cc65")
        self.screen_width = Spec.decode(yaml, "screen_width")
        self.charset = Spec.Charset(Spec.decode(yaml, "charset"))
        if "images" in yaml:
            self.images = [Spec.Image(spec, self) for spec in yaml["images"]]
        else:
            self.images = []


output = AtomicOutput.AtomicOutput()


def process_charset(image, image_specs, prerun):
    if not prerun:
        return

    count = image.count
    if image_specs.inverted == Inverted.PRESENT:
        count //= 2

    for index in range(count):
        value = image.get(index)
        if not (all(x == 0 for x in value) and image_specs.skip_blank(index)):
            charset.add_with_index(image.get(index), index + image_specs.offset)
            if image_specs.inverted == Inverted.CREATE:
                value2 = b""
                for b in value:
                    value2 += (b ^ 255).to_bytes(1, byteorder="little")
                charset.add_with_index(value2, index + charset.size // 2 + image_specs.offset)
        if image_specs.inverted == Inverted.PRESENT:
            value = image.get(index + count)
            if not (all(x == 255 for x in value) and image_specs.skip_blank(index + count)):
                charset.add_with_index(value, index + charset.size // 2)


def process_image(image, image_specs, prerun):
    image_width = image.width
    image_height = image.height
    inverted_x_offset = 0
    inverted_y_offset = 0
    if image_specs.inverted == Inverted.PRESENT or image_specs.inverted == Inverted.IF_DIFFERENT:
        if image_specs.slice_y > 1:
            image_width //= 2
            inverted_x_offset = image_width
        else:
            image_height //= 2
            inverted_y_offset = image_height

    if image_width % image_specs.slice_x != 0:
        output.abort(f"image width {image_width} not multiple of slice-x {image_specs.slice_x}")
    if image_height % image_specs.slice_y != 0:
        output.abort(f"image height {image_height} not multiple of slice-y {image_specs.slice_y}")
    width = image_width // image_specs.slice_x
    height = image_height // image_specs.slice_y
    count = image_specs.slice_x * image_specs.slice_y

    parts = []

    for y in range(image_specs.slice_y):
        for x in range(image_specs.slice_x):
            if not prerun:
                runlength = RunlengthEncoder.RunlengthEncoder()
            for yy in range(height):
                if yy > 0 and image_specs.screen_width is not None:
                    if not prerun:
                        runlength.skip(image_specs.screen_width - width)
                for xx in range(width):
                    value = image.get_xy(x * width + xx, y * height + yy)
                    value2 = None
                    if image_specs.inverted == Inverted.PRESENT or image_specs.inverted == Inverted.IF_DIFFERENT:
                        value2 = image.get_xy(x * width + xx + inverted_x_offset, y * height + yy + inverted_y_offset)
                        if image_specs.inverted == Inverted.IF_DIFFERENT and value == value2:
                            value2 = None
                    if value is None:
                        if not prerun:
                            runlength.skip(1)
                    else:
                        if value2 is None:
                            if not prerun:
                                char = charset.add(value)
                        else:
                            char = charset.add_pair(value, value2)
                        if not prerun:
                            runlength.add(char)
            if not prerun:
                parts.append(runlength.end())

    if not prerun:
        if count == 1:
            assembler.global_bytes(image_specs.name, parts[0])
        else:
            assembler.data_section()
            assembler.parts(image_specs.name, parts, image_specs.include_count)


processors = {
    "charset": process_charset,
    "image": process_image
}

parser = argparse.ArgumentParser(description='Convert images to charset and screens.')

parser.add_argument("specs")
parser.add_argument("output")
parser.add_argument("-M", metavar="FILE", dest="depfile", help="output dependency information to FILE")

args = parser.parse_args()

output.set_filename(args.output)
dependencies = Dependencies.Dependencies(args.depfile, args.output)
dependencies.add(args.specs)


with open(args.specs, "r") as stream:
    try:
        specs = Spec(yaml.safe_load(stream))
    except yaml.YAMLError as exc:
        output.abort(f"can't load specs from '{args.specs}: {exc}")

assembler = AssemblerOutput.AssemblerOutput(specs.assembler, output.get_file())
charset = Charset.Charset(specs.charset.count, bytes((specs.charset.width * specs.charset.height) // 8), True)

assembler.header(args.specs)

for index, value in specs.charset.predefined.items():
    charset.add_with_index(bytes.fromhex(value), index)

images = []

for image_spec in specs.images:
    dependencies.add(image_spec.file)
    image = CharacterImage.CharacterImage(image_spec.file, specs.charset.width, specs.charset.height,
                                          {0x80000000: 0, 0x808080: 0})
    images.append(image)
    if image_spec.type in processors:
        processors[image_spec.type](image, image_spec, True)
    else:
        output.abort(f"unknown type '{image_spec.type}'")

for image_spec, image in zip(specs.images, images):
    processors[image_spec.type](image, image_spec, False)

assembler.global_bytes(specs.charset.name, charset.get_bytes())
assembler.comment(f"{charset.charcter_count} of {charset.size} characters used")

output.close()
dependencies.write()
