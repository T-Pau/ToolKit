#!/usr/bin/env python3

"""
  convert-characters -- convert multiple images into one character set
  Copyright (C) Dieter Baron

  The author can be contacted at <dillo@tpau.group>.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. The names of the authors may not be used to endorse or promote
     products derived from this software without specific prior
     written permission.

  THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS
  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from operator import index
import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir, "python-packages")))

import argparse
import enum
import yaml

import CharacterImage
import Charset
import PaletteImage
import RunlengthEncoder
import Screens
import Script
from Palette import Palette

class Inverted(enum.Enum):
    NONE = "none"
    CREATE = "create"
    PRESENT = "present"
    IF_DIFFERENT = "if-different"


class Spec:
    @staticmethod
    def decode(yaml, key, default_value=None, required=False):
        if yaml is not None and key in yaml:
            return yaml[key]
        else:
            if required:
                raise RuntimeError(f"missing required directive '{key}'")
            return default_value

    class Charset:
        def __init__(self, yaml_spec, spec):
            self.align = Spec.decode(yaml_spec, "align")
            self.count = Spec.decode(yaml_spec, "count", 256)
            self.height = Spec.decode(yaml_spec, "height", 8)
            self.name = Spec.decode(yaml_spec, "name", required=True)
            self.predefined = Spec.decode(yaml_spec, "predefined", {})
            self.rl_encode = Spec.decode(yaml_spec, "rl-encode", False)
            self.section = Spec.decode(yaml_spec, "section", spec.section)
            self.width = Spec.decode(yaml_spec, "width", 8)

            if self.rl_encode:
                self.align = None

    class Characters:
        def __init__(self, yaml_spec):
            self.additional_palette = Spec.decode(yaml_spec, "additional-palette")
            self.charset = Spec.decode(yaml_spec, "charset", 0)
            if type(self.charset) is not int:
                raise RuntimeError("charset must be integer")
            self.char_size_x = Spec.decode(yaml_spec, "char-size-x", 1)
            self.char_size_y = Spec.decode(yaml_spec, "char-size-y", 1)
            self.file = Spec.decode(yaml_spec, "file", required=True)
            self.inverted = Inverted(Spec.decode(yaml_spec, "inverted", "none"))
            self.offset = Spec.decode(yaml_spec, "offset", 0)
            self.palette = Spec.decode(yaml_spec, "palette")
            pixel_size_x = Spec.decode(yaml_spec, "pixel-size-x", 1)
            pixel_size_y = Spec.decode(yaml_spec, "pixel-size-y", 1)
            self.pixel_size = PaletteImage.PixelSize(pixel_size_x, pixel_size_y)

    class Image:
        def __init__(self, yaml_spec, spec):
            self.additional_palette = Spec.decode(yaml_spec, "additional-palette")
            self.align = Spec.decode(yaml_spec, "align")
            self.charset = Spec.decode(yaml_spec, "charset", 0)
            self.file = Spec.decode(yaml_spec, "file", required=True)
            self.include_count = Spec.decode(yaml_spec, "include-count", True)
            self.include_index = Spec.decode(yaml_spec, "include-index", True)
            self.inverted = Inverted(Spec.decode(yaml_spec, "inverted", "none"))
            self.name = Spec.decode(yaml_spec, "name", required=True)
            self.names = Spec.decode(yaml_spec, "names")
            self.palette = Spec.decode(yaml_spec, "palette")
            pixel_size_x = Spec.decode(yaml_spec, "pixel-size-x", 1)
            pixel_size_y = Spec.decode(yaml_spec, "pixel-size-y", 1)
            self.pixel_size = PaletteImage.PixelSize(pixel_size_x, pixel_size_y)
            self.rl_encode = Spec.decode(yaml_spec, "rl-encode", True)
            self.screen_file = Spec.decode(yaml_spec, "screen-file")
            self.screen_width = Spec.decode(yaml_spec, "screen-width", spec.screen_width)
            self.section = Spec.decode(yaml_spec, "section", spec.section)
            self.slice_x = Spec.decode(yaml_spec, "slice-x", 1)
            self.slice_y = Spec.decode(yaml_spec, "slice-y", 1)
            self.trim = RunlengthEncoder.Trim(Spec.decode(yaml_spec, "trim", "trailing"))

            if not self.include_index:
                self.include_count = False
            if self.screen_file is not None:
                self.rl_encode = False
            if self.names is not None:
                if type(self.names) is not list:
                    raise RuntimeError("names must be list")
                if len(self.names) != self.slice_x * self.slice_y:
                    raise RuntimeError(f"expected {self.slice_x*self.slice_y} names, got {len(self.names)}")

    def __init__(self, spec_file):
        with open(spec_file, "r") as stream:
            yaml_spec = yaml.safe_load(stream)

            self.directory = os.path.dirname(spec_file)
            self.screen_width = Spec.decode(yaml_spec, "screen-width")
            self.section = Spec.decode(yaml_spec, "section", "data")

            if type(yaml_spec["charset"]) is list:
                self.charset = []
                for charset_spec in yaml_spec["charset"]:
                    self.charset.append(Spec.Charset(charset_spec, self))
            else:
                self.charset = [Spec.Charset(Spec.decode(yaml_spec, "charset"), self)]

            if "characters" in yaml_spec:
                self.characters = [Spec.Characters(spec) for spec in yaml_spec["characters"]]
            else:
                self.characters = []

            self.images = []
            if "images" in yaml_spec:
                for image_spec in yaml_spec["images"]:
                    if "type" in image_spec and image_spec["type"] != "charset":
                        # TODO: print deprecation warning
                        self.characters.append(Spec.Characters(image_spec))
                    else:
                        self.images.append(Spec.Image(image_spec, self))


class ConvertCharacters(Script.Script):
    def __init__(self) -> None:
        super().__init__("Convert images to charset and screens.", Script.Option.assembler, Script.Option.include_directories)
        self.arg_parser.add_argument("specs")
        self.arg_parser.add_argument("-v", dest="verbose", action="store_true", help="print debug output")
        self.charsets = []
        self.char_width = None
        self.char_height = None

    # Get filename of input file.
    def input_filename(self):
        return self.args.specs

    def execute_sub(self):
        try:
            specs = Spec(self.input_filename())
        except yaml.YAMLError as exc:
            raise RuntimeError(f"can't load specs from '{args.specs}: {exc}")

        for charset_spec in specs.charset:
            if self.char_width is not None and charset_spec.width != self.char_width:
                raise RuntimeError("different character set widths not supported")
            if self.char_height is not None and charset_spec.height != self.char_height:
                raise RuntimeError("different character set heights not supported")
            self.char_width = charset_spec.width
            self.char_height = charset_spec.height

            charset = Charset.Charset(charset_spec.count, bytes((self.char_width * self.char_height) // 8), True)
            for index, value in charset_spec.predefined.items():
                charset.add_with_index(bytes.fromhex(value), index)
            self.charsets.append(charset)

        for characters in specs.characters:
            self.process_characters(characters)

        images = []

        for image_spec in specs.images:
            images.append(self.load_image(image_spec))

        for image_spec, image in zip(specs.images, images):
            self.process_image(image, image_spec, True)

        for image_spec, image in zip(specs.images, images):
            self.process_image(image, image_spec, False)


        for index in range(0, len(self.charsets)):
            charset = self.charsets[index]
            charset_spec = specs.charset[index]

            charset_bytes = charset.get_bytes()
            if charset_spec.rl_encode:
                runlength = RunlengthEncoder.RunlengthEncoder()
                runlength.add_bytes(charset_bytes)
                charset_bytes = runlength.end()
            self.assembler.bytes_object(charset_spec.name, charset_bytes, section=charset_spec.section, alignment=charset_spec.align)

            self.assembler.comment(f"{charset.character_count} of {charset.size} characters used")


    def process_characters(self, spec):
        image = self.load_image(spec)

        if spec.charset >= len(self.charsets):
            raise RuntimeError(f"invalid charset {spec.charset}, only {len(self.charsets)} defined")
        charset = self.charsets[spec.charset]

        if image.width % spec.char_size_x != 0:
            raise RuntimeError(f"image width {image.width} not multiple of char-size-x {spec.char_size_x}")
        if image.height % spec.char_size_y != 0:
            raise RuntimeError(f"image height {image.height} not multiple of char-size-y {spec.char_size_y}")

        count = image.count // (spec.char_size_x * spec.char_size_y)
        if spec.inverted == Inverted.PRESENT:
            count //= 2
        inverted_offset = count * spec.char_size_x * spec.char_size_y

        for y in range(image.height // spec.char_size_y):
            for x in range(image.width // spec.char_size_x):
                for yy in range(spec.char_size_y):
                    for xx in range(spec.char_size_x):
                        value = image.get_xy(x * spec.char_size_x + xx, y * spec.char_size_y + yy)
                        if value is None:
                            continue
                        index = y * (image.width // spec.char_size_x) + x + yy * spec.char_size_x * count + xx * count
                        charset.add_with_index(value, index + spec.offset)

                        if spec.inverted == Inverted.PRESENT or spec.inverted == Inverted.CREATE:
                            if spec.inverted == Inverted.PRESENT:
                                value = image.get_xy(x * spec.char_size_x + xx, y * spec.char_size_y + yy + image.height // 2)
                            else:
                                value = bytes(b ^ 0xFF for b in value)
                            charset.add_with_index(value, index + inverted_offset)
                            

    def process_image(self, image, image_spec, prerun):
        image_width = image.width
        image_height = image.height
        inverted_x_offset = 0
        inverted_y_offset = 0
        if image_spec.inverted == Inverted.PRESENT or image_spec.inverted == Inverted.IF_DIFFERENT:
            if image_spec.slice_y > 1:
                image_width //= 2
                inverted_x_offset = image_width
            else:
                image_height //= 2
                inverted_y_offset = image_height

        if image_width % image_spec.slice_x != 0:
            raise RuntimeError(f"image width {image_width} not multiple of slice-x {image_spec.slice_x}")
        if image_height % image_spec.slice_y != 0:
            raise RuntimeError(f"image height {image_height} not multiple of slice-y {image_spec.slice_y}")
        width = image_width // image_spec.slice_x
        height = image_height // image_spec.slice_y
        count = image_spec.slice_x * image_spec.slice_y

        parts = []

        if type(image_spec.charset) is not dict:
            charset = self.charsets[image_spec.charset]

        for y in range(image_spec.slice_y):
            for x in range(image_spec.slice_x):
                if not prerun:
                    if image_spec.rl_encode:
                        runlength = RunlengthEncoder.RunlengthEncoder(image_spec.trim)
                    else:
                        chars = b""
                for yy in range(height):
                    if type(image_spec.charset) is dict and yy in image_spec.charset:
                        charset = self.charsets[image_spec.charset[yy]]

                    if yy > 0 and image_spec.screen_width is not None:
                        if not prerun and image_spec.rl_encode:
                            runlength.skip(image_spec.screen_width - width)
                    for xx in range(width):
                        value = image.get_xy(x * width + xx, y * height + yy)
                        value2 = None
                        if image_spec.inverted == Inverted.PRESENT or image_spec.inverted == Inverted.IF_DIFFERENT:
                            value2 = image.get_xy(x * width + xx + inverted_x_offset, y * height + yy + inverted_y_offset)
                            if image_spec.inverted == Inverted.IF_DIFFERENT and value == value2:
                                value2 = None
                        if value is None:
                            if not prerun:
                                if image_spec.rl_encode:
                                    runlength.skip(1)
                                else:
                                    raise RuntimeError(f"{image_spec.file} at slice {x}/{y} char {xx}/{yy}: can't encode hole")
                        else:
                            try:
                                if value2 is None:
                                    if not prerun:
                                        count_before = charset.character_count
                                        char = charset.add(value)
                                        if self.args.verbose and count_before != charset.character_count:
                                            print(f"{x}/{y}.{xx}/{yy}: {value.hex()} -> {hex(char)}")
                                else:
                                    count_before = charset.character_count
                                    char = charset.add_pair(value, value2)
                                    if self.args.verbose and count_before != charset.character_count:
                                        print(f"{y}.{xx}/{yy}: {value.hex()} {value2.hex()} -> {hex(char)}")
                                if not prerun:
                                    if image_spec.rl_encode:
                                        runlength.add(char)
                                    else:
                                        chars += char.to_bytes(1, byteorder="little")
                            except Exception as ex:
                                self.error(f"{image_spec.file} at slice {x}/{y} char {xx}/{yy}: {ex}")
                        
                if not prerun:
                    if image_spec.rl_encode:
                        parts.append(runlength.end())
                    else:
                        parts.append(chars)

        if not prerun:
            if image_spec.screen_file is not None:
                screens = Screens.Screens(self.dependencies, images=list(map(lambda part: {"width": width, "height": height, "data": part}, parts)), assembler_output=self.assembler)
                if not screens.convert(self.find_file(image_spec.screen_file), self.output.get_file()):
                    raise RuntimeError("")
            else:
                if count == 1:
                    self.assembler.bytes_object(image_spec.name, parts[0], section=image_spec.section, alignment=image_spec.align)
                else:
                    self.assembler.parts(image_spec.name, parts, include_count=image_spec.include_count, include_index=image_spec.include_index, names=image_spec.names, section=image_spec.section, alignment=image_spec.align)

    def load_image(self, spec):
        filename = self.find_file(spec.file)
        if spec.palette is None:
            palette = CharacterImage.CharacterImage.default_palette
        else:
            palette = Palette(spec.palette)
        return CharacterImage.CharacterImage(filename, self.char_width // palette.bit_length(), self.char_height,
                                                palette=palette, additional_palette=spec.additional_palette,
                                                pixel_size=spec.pixel_size)


ConvertCharacters().run()
