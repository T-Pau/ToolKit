#!/usr/bin/env python3

"""
  parallel-struct -- create parallel arrays from array of structs
  Copyright (C) Dieter Baron

  The author can be contacted at <dillo@tpau.group>.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. The names of the authors may not be used to endorse or promote
     products derived from this software without specific prior
     written permission.

  THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS
  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir, "python-packages")))

import argparse
import enum
import yaml

import AssemblerOutput
import Dependencies
import AtomicOutput

class FieldType(enum.Enum):
    SINGLE = "single"
    STRING = "string"
    MULTI = "multi"
    OMIT = "omit"

class Spec:
    @staticmethod
    def decode(yaml, key, default_value=None):
        if yaml is not None and key in yaml:
            return yaml[key]
        else:
            return default_value

    class Settings:
        def __init__(self, yaml):
            self.default_string_encoding = Spec.decode(yaml, "default_string_encoding")
            self.prefix = Spec.decode(yaml, "prefix", "")
            self.default_name_field = Spec.decode(yaml, "default_name_field", "name")

    class Field:
        def __init__(self, yaml, settings):
            self.type = FieldType(Spec.decode(yaml, "type", "single"))
            self.encoding = Spec.decode(yaml, "encoding")
            self.default_value = Spec.decode(yaml, "default_value")
            self.length = Spec.decode(yaml, "length", 1)
            self.padding = Spec.decode(yaml, "padding", self.default_padding())
            self.default_value_prefix = Spec.decode(yaml, "default_value_prefix")
            self.default_value_field = Spec.decode(yaml, "default_value_field", settings.default_name_field)

        def default_padding(self):
            if self.type == FieldType.MULTI or self.type == FieldType.SINGLE:
                return 0
            elif self.type == FieldType.STRING:
                return " "

    def decode_struct(self, yaml):
        struct = {}
        for key in self.fields.keys():
            field = self.fields[key]
            if key in yaml:
                value = yaml[key]
            elif field.default_value is not None:
                value = field.default_value
            elif field.default_value_prefix is not None:
                value = field.default_value_prefix + yaml[field.default_value_field]
            elif field.type == FieldType.MULTI:
                value = []
            else:
                raise RuntimeError(f"no known value for {key}")

            if field.length > 1:
                while len(value) < field.length:
                    if type(value) == list:
                        value.append(field.padding)
                    else:
                        value += field.padding

            struct[key] = value
        return struct

    def __init__(self, yaml):
        self.settings = Spec.Settings(yaml["settings"])
        self.fields = {}
        self.structs = []
        for key in yaml["fields"].keys():
            self.fields[key] = Spec.Field(yaml["fields"][key], self.settings)
        for struct in yaml["structs"]:
            self.structs.append(self.decode_struct(struct))

output = AtomicOutput.AtomicOutput()

parser = argparse.ArgumentParser(description='Convert images to charset and screens.')

parser.add_argument("structs")
parser.add_argument("output")
parser.add_argument("-M", metavar="FILE", dest="depfile", help="output dependency information to FILE")

args = parser.parse_args()

output.set_filename(args.output)
dependencies = Dependencies.Dependencies(args.depfile, args.output)
dependencies.add(args.structs)

with open(args.structs, "r") as stream:
    try:
        structs = Spec(yaml.safe_load(stream))
    except yaml.YAMLError as exc:
        output.abort(f"can't load structs from '{args.structs}: {exc}")

assembler = AssemblerOutput.AssemblerOutput(output.get_file())
assembler.header(args.structs)
assembler.data_section()

for key in structs.fields.keys():
    field = structs.fields[key]

    if field.type == FieldType.OMIT:
        continue

    if field.type == FieldType.STRING:
        for i, struct in enumerate(structs.structs):
            encoding = field.encoding
            if encoding is None:
                encoding = structs.settings.default_string_encoding
            assembler.local_symbol(f"{structs.settings.prefix}{key}_{i}")
            assembler.string(struct[key], encoding)
            assembler.end_object()

    assembler.global_symbol(f"{structs.settings.prefix}{key}")
    for i, struct in enumerate(structs.structs):
        if field.type == FieldType.STRING:
            value = f"{structs.settings.prefix}{key}_{i}"
        else:
            value = struct[key]
        encoding = field.encoding if field.type != FieldType.STRING else None
        assembler.data(value, encoding)
    assembler.end_object()

output.close()
dependencies.write()
