#!/usr/bin/env python3

"""
  convert-charset -- convert sprite image
  Copyright (C) Dieter Baron

  The author can be contacted at <dillo@tpau.group>.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. The names of the authors may not be used to endorse or promote
     products derived from this software without specific prior
     written permission.

  THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS
  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import os
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "python-packages"))

import argparse

import CharacterImage
import Palette
import PaletteImage
import Script

class ConvertSprites(Script.Script):
    def __init__(self) -> None:
        super().__init__("Convert sprite image.", Script.Option.symbol, Script.Option.runlength_encode)
        self.arg_parser.add_argument("image")
        self.arg_parser.add_argument("-m", "--multicolor", action="store_true", dest="multicolor", help="multicolor sprites")
        self.arg_parser.add_argument("-P", "--palette", metavar="COLOR0,COLOR1,...", dest="palette", help="specify color palette")

    # Get filename of input file.
    def input_filename(self):
        return self.args.image
    
    # Alignment to use if --align option is given.
    def natural_alignment(self):
        return 64


    def execute_sub(self):
        pixel_size = None
        palette = None
        width = 8
        if self.args.palette:
            palette = Palette.Palette({val: idx for idx, val in enumerate(map(lambda s: int(s, 16), self.args.palette.split(",")))})
        if self.args.multicolor:
            pixel_size=PaletteImage.PixelSize(2, 1)
            width = 4
            print(f"multicolor. width: {width}, pixel_bits: {palette.bit_length()}")

        charset = CharacterImage.CharacterImage(self.input_filename(), width, 1, pixel_size=pixel_size, palette=palette)

        if charset.width % 3 != 0:
            raise RuntimeError("image width not multiple of 24")
        if charset.height % 21 != 0:
            raise RuntimeError("image width not multiple of 21")

        binary = bytearray()

        num_sprites_x = charset.width // 3
        num_sprites_y = charset.height // 21

        print(f"width: {width}, charset width: {charset.width}, charset height: {charset.height}, num x: {num_sprites_x}, num y: {num_sprites_y}")

        for sprite_y in range(0, num_sprites_y):
            for sprite_x in range(0, num_sprites_x):
                for y in range(0, 21):
                    for x in range(0, 3):
                        binary += charset.get_xy(x + sprite_x * 3, y + sprite_y * 21)
                zero = 0
                binary += zero.to_bytes(1, byteorder="little")

        self.symbol(binary)

ConvertSprites().run()
